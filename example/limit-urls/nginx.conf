
user  nginx;
worker_processes  auto;

# en docker error.log > /dev/stderr
error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

# cargamos el modulo de lua, el ndk es utilizado por lua
load_module modules/ndk_http_module.so;
load_module modules/ngx_http_lua_module.so;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # en docker access.log > /dev/stdout
    access_log  /var/log/nginx/access.log  main;

    sendfile        on;

    keepalive_timeout  65;

    # eliminamos el server
    header_filter_by_lua_block {
        ngx.header['server'] = nil
    }

    server {
		listen 3000;

		# se utiliza para controlar el acceso
		access_by_lua_block {
			local allowed_patterns = {
				"^/$",              -- root
				"^/api",            -- api
				"^/static/",        -- static
				"^/admin",          -- admin
				"^/accounts",       -- registro/login
				"^/dashboard",      -- registro/login
				"^/conf/api",       -- configuraci√≥n manifest
				"^/resource/subtitle/[0-9a-f-]+/download/?$",
				"^/resource/subtitle/[0-9a-f-]+/follow/?$",
				"^/[0-9a-f-]+/api"  -- api consumer
			}

			local uri = ngx.var.uri -- uri es la url sin parametros

			local uri_matches_allowed_pattern = false
			for _, pattern in ipairs(allowed_patterns) do
				if ngx.re.match(uri, pattern) then
					uri_matches_allowed_pattern = true
					break
				end
			end

			if not uri_matches_allowed_pattern then
				ngx.status = 403
				ngx.header.content_type = 'text/plain'
				ngx.say('hi')
				-- REF: https://github.com/openresty/lua-nginx-module#http-status-constants
				ngx.exit(ngx.HTTP_FORBIDDEN)
			end
		}

		location / {
			proxy_set_header Host $host;
			proxy_set_header X-Real-Ip $remote_addr;
			proxy_set_header X-Forwarded-Proto $scheme;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

			proxy_pass http://localhost:8000;
		}
	}
}
